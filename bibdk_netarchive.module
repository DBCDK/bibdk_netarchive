<?php

/**
 * @file bibdk_netarchive.module
 * Add link to archived pdf articles of Ting objects
 */


module_load_include('inc', 'bibdk_netarchive', 'bibdk_netarchive.admin');


/**
 * Implementation of hook_menu().
 */
function bibdk_netarchive_menu() {

  $items['moreinfo/netarchive/%'] = array(
    'title' => '',
    'page callback' => 'bibdk_netarchive_moreinfo_callback',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type'  => MENU_NORMAL_ITEM,
  );

  return $items;

}


/**
 * Implementation of hook_admin_paths_alter().
 */
function bibdk_netarchive_admin_paths_alter(&$paths) {
  $paths['moreinfo/bibdk_netarchive/*'] = FALSE;
}



/**
 * Implementation of hook_theme().
 */
function bibdk_netarchive_theme() {
  return array(
    'bibdk_netarchive_link' => array(
      'render element' => 'elements',
      'template' => 'theme/bibdk-netarchive-link',
    ),
    'bibdk_netarchive_content' => array(
      'render element' => 'elements',
      'template' => 'theme/bibdk-netarchive-content',
    ),
    'bibdk_netarchive_error' => array(
      'render element' => 'elements',
      'template' => 'theme/bibdk-netarchive-error',
    ),
  );
}



/**
 * webarchive page callback
 */
function bibdk_netarchive_moreinfo_callback($local_id = NULL) {

  $tmp_name = WEB_CACHE_PATH . 'webarkiv_' . md5(session_id() . microtime());
  register_shutdown_function(
    create_function('',
      "unlink('{$tmp_name}.pdf');
       unlink('{$tmp_name}_arkiv.pdf');
       unlink('{$tmp_name}.json');"
    )
  );

  if ( !$local_id ) {
    return t('pdf ID is missing', array(), array('context' => 'bibdk_netarchive:error'));
    watchdog('netarchive', 'Netarchive PDF was called with empty ID.', array(), WATCHDOG_ERROR);
  }

  $local_id = urldecode($local_id);

  $item = bibdk_netarchive_search($local_id);

  $path = open_moreinfo_object_path($item['lid'], 'netarchivePdfUrl');

  if ( file_exists($path) ) {

    $items = array(
      '#theme' => 'bibdk_netarchive_content',
      '#bibdk_netarchive_data' => $item,
      '#bibdk_netarchive_src' => $GLOBALS['base_url'] . '/sites/default/files/moreinfo/netarchivePdfUrl/' . md5($item['lid']) . '.pdf',
    );

  }
  else {

    $items = array(
      '#theme' => 'bibdk_netarchive_error',
      '#bibdk_netarchive_error' => t("pdf \"@lid\" not found.", array('@lid' => $item['lid']), array('context' => 'bibdk_netarchive:error')),
    );

  }

  return drupal_render($items);

}


function bibdk_netarchive_search($local_id) {

  $params['query'] = 'rec.id=' . $local_id ;

  $params['numResults'] = 1;
  $params['includeHoldingsCount'] = FALSE;

  // search profile (opensearch::profile)
  $params['profile'] = variable_get('ting_search_profile', FALSE);
  if (!($params['profile'])) {
    watchdog('ting search carousel', 'search profile is not set - yields no search results', array(), WATCHDOG_ERROR, url('admin/config/ting/settings'));
  }

  // agency (opensearch::agency)
  $params['agency'] = variable_get('ting_agency');
  if (!($params['agency'])) {
    watchdog('ting search carousel', 'agency is not set - yields no search results', array(), WATCHDOG_ERROR, url('admin/config/ting/settings'));
  }

  // set Object Format
  $params['objectFormat'] = variable_get('objectFormat', 'briefDisplay');

  //Set queryLanguage
  $params['queryLanguage'] = ting_openformat_get_cql_language();

  // do the actual search via ting_client_class
  $client = new ting_client_class();

  $result = $client->do_request('search', $params);

  if ( !$result ) {
    return array('title'=>'','creator'=>'');
  }


  // Loop over the search results collecting basic object information.
  /* @var $TingClientObjectCollection TingClientObjectCollection */
  foreach ($result->collections as $key => $TingClientObjectCollection) {
    $manifestations = $TingClientObjectCollection->getFormattedCollection()
      ->getBriefDisplay()->manifestation;
    foreach ($manifestations as $manifestation) {
      $item = array();
      $item['pid'] = (!empty($manifestation->identifier->{'$'})) ? $manifestation->identifier->{'$'} : FALSE;
      if ($item['pid']) {
        $i = explode(':', $item['pid']);
        $item['lok'] = $i[0];
        $item['lid'] = $i[1];
      }
      $item['title'] = (!empty($manifestation->title->{'$'})) ? $manifestation->title->{'$'} : NULL;
      $item['creator'] = (!empty($manifestation->creator->{'$'})) ? $manifestation->creator->{'$'} : NULL;
    }
  }

  return $item;

}



/** Implements hook_ting_openformat_actions
 * Add actions to work, subwork and manifestations
 * @param $type
 * @param $entity
 * @param $view_mode
 * @param $langcode
 * @return array
 */
function bibdk_netarchive_ting_openformat_actions($type, $entity, $view_mode, $langcode){

  $netarchive_link = array();

  if ( $type == 'bibdkManifestation' && $entity->getWebArchive() ){

    $netarchive_link = array();

    $local_id = urlencode($entity->ding_entity_id);

    // return render array for netarchive link:
    $options = array(
      'attributes' => array(
        'title' => t('netarchive link'),
        'id' => drupal_html_id('netarchive-' . $local_id),
        'class' => array('netarchive'),
      ),
      'html' => TRUE,
    );

    $netarchive_link = array(
      '#text' => t('label_netarchive_link', array(), array('context' => 'bibdk_covers')),
      '#path' => 'moreinfo/netarchive/' . $local_id,
      '#options' => $options,
    );

  }

  $element['netarchive'] = array(
    '#markup' => theme('bibdk_netarchive_link', array('elements' => $netarchive_link)),
    '#weight' => 1
  );

  return $element;

}


